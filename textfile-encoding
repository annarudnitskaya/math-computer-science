import os
import re
import math
from collections import defaultdict


def write_binary_file(encoded_data, filename):
    with open(filename, 'wb') as file:
        file.write(encoded_data)


def calculate_entropy(text):
    frequency = defaultdict(int)
    for char in text:
        frequency[char] += 1
    total_chars = len(text)
    entropy = -sum((count / total_chars) * math.log2(count / total_chars) for count in frequency.values())
    return entropy


def encode_to_binary(encoded_data):
    binary_data = bytearray()

    for char, length in encoded_data:
        # Using 5 bits for length (1 sign bit + 4 bits for length)
        sign_bit = 0 if length >= 0 else 1
        length_bits = abs(length)

        # Ensure length is within the range of -15 to 15 (5 bits)
        if length_bits > 15:
            raise ValueError("Length exceeds maximum allowed value of 15.")

        # Convert to binary format
        binary_data.append((sign_bit << 4) | length_bits)

        # Append the character's UTF-8 bytes
        binary_data.extend(char.encode('utf-8'))  # Encode char to UTF-8 bytes

    return binary_data


def run_length_encoding(text):
    encoded = []
    max_run_length = 0
    current_char = text[0]
    current_length = 1

    for char in text[1:]:
        if char == current_char:
            current_length += 1
        else:
            encoded.append((current_char, current_length))
            max_run_length = max(max_run_length, current_length)
            current_char = char
            current_length = 1

    encoded.append((current_char, current_length))
    max_run_length = max(max_run_length, current_length)

    return encoded, max_run_length


def main():
    input_filename = 'poem.txt'
    output_filename = 'poem.var[1]'
    # Указываем кодировку UTF-8 при открытии файла
    with open(input_filename, 'r', encoding='utf-8') as file:
        content = file.read()

    # Преобразуем текст в двоичный формат
    text = ''.join(format(ord(char), '08b') for char in content)

    # Calculate entropy of the original text
    entropy = calculate_entropy(text)

    # Perform Run-Length Encoding
    encoded_data, max_run_length = run_length_encoding(text)

    # Encode to binary format
    binary_encoded_data = encode_to_binary(encoded_data)

    # Write the binary data to a file
    write_binary_file(binary_encoded_data, output_filename)

    # Calculate lengths and compression ratio
    original_length_bits = len(text) * 8  # Each character is 8 bits
    compressed_length_bits = len(binary_encoded_data) * 8

    compression_ratio = original_length_bits / compressed_length_bits

    # Output results
    print(f'Entropy: {entropy:.4f}')
    print(f'Original Length in bits |S|: {original_length_bits}')
    print(f'Compressed Length in bits |C|: {compressed_length_bits}')
    print(f'Compression Ratio k: {compression_ratio:.4f}')
    print(f'Maximum Run Length: {max_run_length}')


if __name__ == '__main__':
    main()
